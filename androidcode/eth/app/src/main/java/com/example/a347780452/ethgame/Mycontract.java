package com.example.a347780452.ethgame;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
//import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class Mycontract extends Contract {
    private static final String BINARY = "var gunfactory = gunfactoryContract.new(\r\n"
            + "   {\r\n"
            + "     from: web3.eth.accounts[0], \r\n"
            + "     data: '', \r\n"
            + "     gas: '4700000'\r\n"
            + "   }, function (e, contract){\r\n"
            + "    console.log(e, contract);\r\n"
            + "    if (typeof contract.address !== 'undefined') {\r\n"
            + "         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\r\n"
            + "    }\r\n"
            + " })";

    public static final String FUNC_GETMYGUN = "Getmygun";

    public static final String FUNC_CREATEUSER = "CreateUser";

    public static final String FUNC_USERLIST = "UserList";

    public static final String FUNC_GUNS = "guns";

    public static final String FUNC_LOGIN = "Login";

    public static final String FUNC_REGISTER = "Register";

    public static final String FUNC_OPENCASE = "Opencase";

    @Deprecated
    protected Mycontract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

//    protected Mycontract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
//        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
//    }

    @Deprecated
    protected Mycontract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

//    protected Mycontract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
//        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
//    }

    public RemoteCall<String> Getmygun(String username, String password) {
        final Function function = new Function(FUNC_GETMYGUN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(username),
                        new org.web3j.abi.datatypes.Utf8String(password)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> CreateUser(String name, String psd) {
        final Function function = new Function(
                FUNC_CREATEUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name),
                        new org.web3j.abi.datatypes.Utf8String(psd)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<String, String, BigInteger, BigInteger>> UserList(BigInteger param0) {
        final Function function = new Function(FUNC_USERLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<String, String, BigInteger, BigInteger>>(
                new Callable<Tuple4<String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<Tuple4<String, BigInteger, BigInteger, String>> guns(BigInteger param0) {
        final Function function = new Function(FUNC_GUNS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple4<String, BigInteger, BigInteger, String>>(
                new Callable<Tuple4<String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple4<String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, BigInteger, String>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<Boolean> Login(String username, String password) {
        final Function function = new Function(FUNC_LOGIN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(username),
                        new org.web3j.abi.datatypes.Utf8String(password)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> Register(String username, String password) {
        final Function function = new Function(
                FUNC_REGISTER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(username),
                        new org.web3j.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> Opencase(String username, String password) {
        final Function function = new Function(
                FUNC_OPENCASE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(username),
                        new org.web3j.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Mycontract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Mycontract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Mycontract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Mycontract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

//    public static Mycontract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
//        return new Mycontract(contractAddress, web3j, credentials, contractGasProvider);
//    }
//
//    public static Mycontract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
//        return new Mycontract(contractAddress, web3j, transactionManager, contractGasProvider);
//    }
//
//    public static RemoteCall<Mycontract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
//        return deployRemoteCall(Mycontract.class, web3j, credentials, contractGasProvider, BINARY, "");
//    }
//
//    public static RemoteCall<Mycontract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
//        return deployRemoteCall(Mycontract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
//    }

    @Deprecated
    public static RemoteCall<Mycontract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Mycontract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Mycontract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Mycontract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}